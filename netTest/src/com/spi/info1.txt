用java SPI实现可插拔

在软件系统的设计中，可插拔式一个重要特性。它意味着给系统添加新功能的时候（或者将原来功能的
实现替换成新的实现而保持接口不变），不改变系统已有功能。这样的可插拔的功能模块被称为插件。
插件（plugin）的出现可以很好地支持系统的扩展性（Extensibility）。一个扩展性好的系统意味
着很容易替换或者增加某些功能。

一般情况下我们怎么在已有系统上修改或者新增一个功能？常见的做法是把系统源码拿出来，修改代码或增加代码
然后重新编译打包再发布，这样新功能就被容纳进去。但是这样做有2个弊端：
1）原来的系统被重新编译打包（应避免这一点，而把新功能容纳进去）
2）如果原来你使用的系统是闭源的，那么拿到它的代码是不可能的。因此好的做法是使得系统支持可插拔的特性，
要加入新功能只需把新的模块实现放置进来，而对原来的系统不做任何改变。这样一来，无论我们是原有系统的使用
这还是开发者，可以用较小的代价和风险扩展系统。利用Java的Service Provider Interface就可以实现。
SPI中有Service（服务），通常是一组接口（interface）或者抽象类（abstract class）还有ServiceProvider
就是一些实现了服务接口的具体类（插件）。在使用中，主系统提供接口，各个插件模块来提供实现类，每个插件有个服务
配置文件指明要实现的接口和具体类，在运行时将服务配置文件放到主系统的classpath,主系统可使用各种插件。

打算用3个工程来演示SPI（Service Provider Interface）的原理

Reader

