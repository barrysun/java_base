

对象的序列化与反序列化

当两个进程进行远程通信时，彼此可以发送各种类型的数据，如文本，图片
语音和视频等。无论是何种类型的数据，都会以二进制序列的形式在网络上传输
当两个java进程进行远程通信时，一个进程能否把一个Java对象发送给另
一个进程呢？答案是肯定的，不过，发送方需要把这个java对象转换为字节序列，才能在
网络上发送；接收方则需要把字节序列再恢复为Java对象。把Java对象转换为字节序列的过程
为对象的序列化；把字节序列恢复为Java对象的过程称为对象的反序列化。


当程序运行时，程序所创建的各种对象都位于内存中，当程序运行结束，这些对象就结束了生命周期，
对象序列化主要由两种用途：
（1）把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；
（2）在网络上传送对象的字节序列。


JDK类库中的序列化API

java.io.ObjectOutputStream 代表对象输出流，它的writeObject(Object obj)方法
可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。

java.io.ObjectInputStream 代表对象输入流，它的readObject()方法从一个资源输入流中读取
字节序列，再把他们反序列化成一个对象，并将其返回。

